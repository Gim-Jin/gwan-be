<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kimnjin.gwanyeon.exercisevideo.repository.ExerciseVideoRepository">

  <resultMap id="exerciseVideoWithTarget" type="ExerciseVideoWithTarget">
    <id property="exerciseVideoId" column="exercise_video_id"/>
    <result property="userId" column="user_id"/>
    <result property="title" column="title"/>
    <result property="url" column="url"/>
    <result property="youtubeId" column="youtube_id"/>
    <result property="description" column="description"/>
    <result property="createdAt" column="created_at"/>
    <result property="updatedAt" column="updated_at"/>
    <collection property="targets" ofType="String" javaType="ArrayList">
      <result column="target_name"/>
    </collection>
  </resultMap>


  <!-- 삽입 : 삽입 시 맵핑 테이블에도 데이터를 추가 해야하기 때문에, useGeneratedKeys를 이용해서 받아주고 keyProperty를 이용해서 아이디를 받을 수 있게 해줌.-->
  <insert id="insert" parameterType="ExerciseVideo" useGeneratedKeys="true"
    keyProperty="exerciseVideoId">
    INSERT INTO exercise_videos (user_id, title, url, youtube_id, description)
    VALUES (#{userId}, #{title}, #{url}, #{youtubeId}, #{description})
  </insert>

  <!-- 업뎃 -->
  <update id="update" parameterType="ExerciseVideo">
    UPDATE exercise_videos
    SET (title = #{title},description = #{description}, update_at = NOW())
    WHERE exercise_video_id = #{exerciseVideoId}
  </update>

  <!-- 삭제 -->
  <delete id="deleteById" parameterType="Long">
    DELETE FROM exercise_videos
    WHERE exercise_video_id = #{id}
  </delete>

  <!-- 오로지 exercise_video만 가지고 오는 애들 -->
  <select id="selectById" parameterType="Long" resultType="exerciseVideoWithTarget">
    SELECT *
    FROM exercise_videos
    WHERE exercise_video_id = #{id}
  </select>

  <select id="selectAll" resultType="ExerciseVideo">
    SELECT *
    FROM exercise_videos
  </select>

  <!-- target도 같이 끌고오는 애들 -->
  <select id="selectByIdWithTarget" parameterType="Long" resultMap="exerciseVideoWithTarget">
    SELECT
    v.exercise_video_id,
    v.user_id,
    v.title,
    v.url,
    v.youtube_id,
    v.description,
    v.created_at,
    v.updated_at,
    t.name AS target_name
    FROM exercise_videos v
    INNER JOIN video_targets vt ON v.exercise_video_id = vt.exercise_video_id
    INNER JOIN targets t ON vt.target_id = t.target_id
    WHERE v.exercise_video_id = #{id};
  </select>

  <select id="selectAllWithTargets" resultMap="exerciseVideoWithTarget">
    SELECT
    v.exercise_video_id,
    v.user_id,
    v.title,
    v.url,
    v.youtube_id,
    v.description,
    v.created_at,
    v.updated_at,
    t.name AS target_name
    FROM exercise_videos v
    INNER JOIN video_targets vt ON v.exercise_video_id = vt.exercise_video_id
    INNER JOIN targets t ON vt.target_id = t.target_id;
  </select>

  <!-- selectTen-->
  <select id="selectNineVideosWithLikeCount" resultMap="exerciseVideoWithTarget">
    SELECT
    v.exercise_video_id,
    v.user_id,
    v.title,
    v.url,
    v.youtube_id,
    v.description,
    v.created_at,
    v.updated_at,
    t.name AS target_name,
    top_videos.like_count
    FROM (
    SELECT
    ev.exercise_video_id,
    COUNT(l.like_id) AS like_count
    FROM exercise_videos ev
    LEFT JOIN likes l ON ev.exercise_video_id = l.exercise_video_id
    GROUP BY ev.exercise_video_id
    ORDER BY like_count DESC, ev.exercise_video_id ASC
    LIMIT 9
    ) top_videos
    JOIN exercise_videos v ON v.exercise_video_id = top_videos.exercise_video_id
    JOIN video_targets vt ON v.exercise_video_id = vt.exercise_video_id
    JOIN targets t ON vt.target_id = t.target_id
    ORDER BY top_videos.like_count DESC, v.exercise_video_id ASC;
  </select>

  <select id="searchWithConditions" resultMap="exerciseVideoWithTarget">
    SELECT
      v.exercise_video_id,
      v.user_id,
      v.title,
      v.url,
      v.youtube_id,
      v.description,
      v.created_at,
      v.updated_at,
      t.name AS target_name
    FROM exercise_videos v
    INNER JOIN video_targets vt ON v.exercise_video_id = vt.exercise_video_id
    INNER JOIN targets t ON vt.target_id = t.target_id
    WHERE 1=1
      <if test="keyword != null and keyword != ''">
        AND v.title LIKE CONCAT('%', #{keyword}, '%')
      </if>
      <if test="target != null and target != ''">
        AND t.name = #{target}
      </if>
    <choose>
      <when test="sort == 'likes'">
        ORDER BY (
          SELECT COUNT(*) FROM likes l WHERE l.exercise_video_id = v.exercise_video_id
        ) DESC
      </when>
      <otherwise>
        ORDER BY v.exercise_video_id DESC
      </otherwise>
    </choose>
  </select>

</mapper>